import os
import re
import shutil
import pandas as pd
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.styles import Font, Alignment
from openpyxl.utils import get_column_letter
from collections import defaultdict

class KATOFileSorter:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ Excel-—Ñ–∞–π–ª–æ–≤ —Å –∫–æ–¥–∞–º–∏ –ö–ê–¢–û –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º.

    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –ü–æ–∏—Å–∫ Excel-—Ñ–∞–π–ª–æ–≤ –≤–æ –≤—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    - –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∞–ø–æ–∫ '–∫–∞—Ç–æ_—Ñ–∞–π–ª—ã'.
    - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ö–ê–¢–û, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ 6-–∑–Ω–∞—á–Ω–æ–º—É –∫–æ–¥—É –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.
    - –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–ø–∏—Å–µ–π.
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Ä–∞–∑—Ä–µ–∑–µ –ö–ê–¢–û –∏ —Ä–µ–≥–∏–æ–Ω–∞ –≤ –≤–∏–¥–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö Excel-—Ñ–∞–π–ª–æ–≤.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
    -----------
    input_dir : str
        –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–µ Excel-—Ñ–∞–π–ª—ã.
    output_dir : str
        –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
    kato_data : defaultdict
        –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–∞ kato_data[kato_code][app_title] = list of (title, DataFrame).
    kato_skip_list : set
        –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ö–ê–¢–û-–∫–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25022025).
    already_saved_kato : set
        –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ö–ê–¢–û-–∫–æ–¥–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —É–∂–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏—Ç–æ–≥–æ–≤—ã–µ —Ñ–∞–π–ª—ã.
    added_entries : set
        –•–µ—à-–º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (tuple: kato, app, filename).

    –ú–µ—Ç–æ–¥—ã:
    --------
    delete_kato_subfolders()
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∞–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è –Ω–∞ '–∫–∞—Ç–æ_—Ñ–∞–π–ª—ã' –≤–æ –≤—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    
    get_excel_files() -> list
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç –≤—Å–µ `.xlsx` —Ñ–∞–π–ª—ã –≤ input_dir –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –ø—É—Ç–∏.

    make_unique_columns(columns: list) -> list
        –î–µ–ª–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏, –¥–æ–±–∞–≤–ª—è—è —Å—É—Ñ—Ñ–∏–∫—Å—ã (_1, _2...) –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è—Ö.

    combine_column(col_tuple: tuple) -> str
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–æ—Ä—Ç–µ–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.

    extract_app_number(name: str) -> int
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.

    get_region_folder(kato_code: str) -> str
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Ü–∏—Ñ—Ä –ö–ê–¢–û-–∫–æ–¥–∞.

    process_files()
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö Excel-—Ñ–∞–π–ª–æ–≤:
        - –∏—â–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏,
        - –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏ –ö–ê–¢–û,
        - –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ 6-–∑–Ω–∞—á–Ω–æ–º—É –∫–æ—Ä–Ω—é –ö–ê–¢–û –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é,
        - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.

    save_kato_files()
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ö–ê–¢–û –≤ Excel-—Ñ–∞–π–ª—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º.
        –ö–∞–∂–¥–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –∞–≤—Ç–æ—à–∏—Ä–∏–Ω–æ–π –∫–æ–ª–æ–Ω–æ–∫.
    """
    MAX_WIDTH = 30
    REGION_CODES = {
        "11": "–ê–∫–º–æ–ª–∏–Ω—Å–∫–∞—è", "15": "–ê–∫—Ç—é–±–∏–Ω—Å–∫–∞—è", "19": "–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è",
        "23": "–ê—Ç—ã—Ä–∞—É—Å–∫–∞—è", "63": "–í–æ—Å—Ç–æ—á–Ω–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è", "71": "–ê—Å—Ç–∞–Ω–∞",
        "75": "–ê–ª–º–∞—Ç—ã", "79": "–®—ã–º–∫–µ–Ω—Ç", "31": "–ñ–∞–º–±—ã–ª—Å–∫–∞—è",
        "27": "–ó–∞–ø–∞–¥–Ω–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è", "35": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∏–Ω—Å–∫–∞—è", "39": "–ö–æ—Å—Ç–∞–Ω–∞–π—Å–∫–∞—è",
        "43": "–ö—ã–∑—ã–ª–æ—Ä–¥–∏—Å–Ω–∫–∞—è", "47": "–ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–∞—è", "10": "–æ–±–ª–∞—Å—Ç—å –ê–±–∞–π",
        "33": "–æ–±–ª–∞—Å—Ç—å –ñ–µ—Ç—ñ—Å—É", "62": "–æ–±–ª–∞—Å—Ç—å “∞–ª—ã—Ç–∞—É", "55": "–ü–∞–≤–ª–æ–¥–∞—Ä—Å–∫–∞—è",
        "59": "–°–µ–≤–µ—Ä–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è", "61": "–¢—É—Ä–∫–µ—Å—Ç–∞–Ω—Å–∫–∞—è"
    }

    def __init__(self, input_dir='.', output_dir='–∏—Ç–æ–≥–æ–≤—ã–µ_—Ñ–∞–π–ª—ã'):
        self.input_dir = input_dir
        self.output_dir = output_dir
        os.makedirs(self.output_dir, exist_ok=True)
        self.kato_data = defaultdict(lambda: defaultdict(list))
        self.kato_skip_list = {'25022025'}
        self.already_saved_kato = set()
        self.added_entries = set()

    def delete_kato_subfolders(self):
        deleted = 0
        for root, dirs, _ in os.walk(self.input_dir):
            for d in dirs:
                if d.lower().startswith("–∫–∞—Ç–æ_—Ñ–∞–π–ª—ã"):
                    full_path = os.path.join(root, d)
                    try:
                        shutil.rmtree(full_path)
                        print(f"üóë –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {full_path}")
                        deleted += 1
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {full_path}: {e}")
        print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted} —Å—Ç–∞—Ä—ã—Ö –ø–∞–ø–æ–∫ '–∫–∞—Ç–æ_—Ñ–∞–π–ª—ã'")

    def make_unique_columns(self, columns):
        seen = {}
        new_columns = []
        for col in columns:
            col = col.strip()
            if col in seen:
                seen[col] += 1
                new_columns.append(f"{col}_{seen[col]}")
            else:
                seen[col] = 0
                new_columns.append(col)
        return new_columns

    def combine_column(self, col_tuple):
        parts = [str(x).strip() for x in col_tuple if str(x).strip().lower() != 'nan' and 'Unnamed' not in str(x)]
        return ' / '.join(parts)

    def extract_app_number(self, name):
        match = re.search(r'(\d{1,2})', name)
        return int(match.group(1)) if match else 9999

    def get_region_folder(self, kato_code):
        region_prefix = kato_code[:2]
        return self.REGION_CODES.get(region_prefix, '–ü—Ä–æ—á–µ–µ')

    def get_excel_files(self):
        excel_files = []
        for root, _, files in os.walk(self.input_dir):
            for file in files:
                if file.lower().endswith('.xlsx'):
                    excel_files.append(os.path.join(root, file))
        return excel_files

    def process_files(self):
        self.delete_kato_subfolders()
        all_excel_files = self.get_excel_files()
        print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ Excel-—Ñ–∞–π–ª–æ–≤: {len(all_excel_files)}")

        for file_path in all_excel_files:
            file = os.path.basename(file_path)
            print(f"\nüìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª: {file}")

            try:
                preview = pd.read_excel(file_path, header=None, nrows=15)
                app_idx = None
                header_idx = None

                for i, row in preview.iterrows():
                    line = ' '.join([str(cell) for cell in row if pd.notna(cell)]).lower()
                    if app_idx is None and re.search(r'(\d{1,2})[- ]*(“õ–æ—Å—ã–º—à–∞|kosymsha|–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)', line):
                        app_idx = i
                    if header_idx is None and any("–∫a—Ç–æ" in str(cell).lower() or "kato" in str(cell).lower() for cell in row):
                        header_idx = i
                    if app_idx is not None and header_idx is not None:
                        break

                app_number = self.extract_app_number(file)
                app_title = f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ-{app_number}"
                title_row = app_title

                if header_idx is not None:
                    if app_idx is not None and app_idx + 1 < header_idx:
                        title_row = ' '.join([str(cell) for cell in preview.iloc[app_idx + 1] if pd.notna(cell)])
                    df = pd.read_excel(file_path, header=header_idx, dtype=str)
                    df.columns = self.make_unique_columns([str(col) for col in df.columns])
                else:
                    print("‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
                    with pd.ExcelFile(file_path) as xls:
                        top_row = pd.read_excel(xls, header=None, nrows=1).iloc[0, 0]
                    title_row = str(top_row)
                    df = pd.read_excel(file_path, header=[1, 2, 3], engine='openpyxl', dtype=str)
                    df.columns = [self.combine_column(col) for col in df.columns]
                    df.columns = self.make_unique_columns(df.columns)

                df = df.dropna(how='all')
                df = df[~df.apply(lambda row: all(str(cell).strip().lower() in ['filt', 'nan', 'none', ''] for cell in row), axis=1)]

                kato_col_candidates = [col for col in df.columns if "kato" in col.lower()]
                if not kato_col_candidates:
                    kato1_col = [col for col in df.columns if "–ö–ê–¢–û" in col]
                    if not kato1_col:
                        print(f"‚ö†Ô∏è –ù–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –ö–ê–¢–û –≤ —Ñ–∞–π–ª–µ: {file}")
                        continue
                    kato_col_candidates.append(kato1_col[0])

                kato_col = kato_col_candidates[0]
                df[kato_col] = df[kato_col].astype(str).str.strip()
                df = df[df[kato_col].notna() & (df[kato_col].str.strip() != '')]
                df['kato_root'] = df[kato_col].str[:6]

                for kato_root, group_df in df.groupby('kato_root'):
                    if not kato_root.isdigit():
                        continue

                    entry_id = (kato_root, app_title, os.path.basename(file_path))
                    if entry_id in self.added_entries:
                        continue
                    self.added_entries.add(entry_id)
                    
                    self.kato_data[kato_root][app_title].append((title_row, group_df.drop(columns=['kato_root'])))

                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {file}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file}: {e}")

    def save_kato_files(self):
        for kato_code, app_dict in self.kato_data.items():
            if kato_code in self.kato_skip_list and kato_code in self.already_saved_kato:
                print(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ö–ê–¢–û: {kato_code}")
                continue

            region_name = self.get_region_folder(kato_code)
            region_folder = os.path.join(self.output_dir, region_name)
            os.makedirs(region_folder, exist_ok=True)

            wb = Workbook()
            wb.remove(wb.active)
            sorted_apps = sorted(app_dict.items(), key=lambda x: self.extract_app_number(x[0]))

            for app_title, entries in sorted_apps:
                sheet_name = app_title[:31]
                ws = wb.create_sheet(title=sheet_name)

                for title_row, df in entries:
                    ws.append([title_row])
                    ws.append([app_title])
                    ws["A1"].font = Font(bold=True, size=14)
                    ws["A1"].alignment = Alignment(horizontal='left')
                    ws.merge_cells(start_row=1, start_column=1, end_row=1, end_column=len(df.columns))

                    ws["A2"].font = Font(bold=True)
                    ws["A2"].alignment = Alignment(horizontal='left')
                    ws.merge_cells(start_row=2, start_column=1, end_row=2, end_column=len(df.columns))

                    for i, row in enumerate(dataframe_to_rows(df, index=False, header=True), start=3):
                        ws.append(row)
                        if i == 3:
                            for cell in ws[i]:
                                cell.font = Font(bold=True)
                                cell.alignment = Alignment(horizontal='center')

                    for i, col in enumerate(ws.columns, start=1):
                        max_length = 0
                        for cell in col:
                            try:
                                if cell.value:
                                    max_length = max(max_length, len(str(cell.value)))
                            except:
                                pass
                        adjusted_width = min(max_length + 2, self.MAX_WIDTH)
                        col_letter = get_column_letter(i)
                        ws.column_dimensions[col_letter].width = adjusted_width

            filename = f"{kato_code}.xlsx"
            output_path = os.path.join(region_folder, filename)
            wb.save(output_path)
            print(f"üìÑ –°–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")
            self.already_saved_kato.add(kato_code)

        print("\nüéâ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏—Ç–æ–≥–æ–≤—ã–µ_—Ñ–∞–π–ª—ã/–û–ë–õ–ê–°–¢–¨/")
